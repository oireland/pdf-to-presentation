@api = http://127.0.0.1:8000

###
# Test the root endpoint
GET {{api}}/

###
# 1. Generate Slide Content from PDF
#
# This request sends a PDF file to the backend to extract text and images.
# IMPORTANT: Replace `/path/to/your/sample.pdf` with the actual path to a PDF file on your system.
# The response will be a JSON object containing the slide content, including filenames for any extracted images.
# Note the `image_filename` in the response for use in the next requests.
POST {{api}}/api/generate-slide-content
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="file"; filename="sample.pdf"
Content-Type: application/pdf

< ./files/sample-image-report.pdf
------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="detail_level"

2
------WebKitFormBoundary7MA4YWxkTrZu0gW--


###
# 2. Generate PowerPoint Presentation
#
# This request sends the slide content (including a reference to an extracted image) and theme information
# to the backend to generate a .pptx file.
#
# IMPORTANT:
# - Replace the "slides" with one returned by the request above
# - You can change `theme_type` to "background" and `theme_name` to one of the configured background themes (e.g., "blue_gradient").
POST {{api}}/api/generate-presentation
Content-Type: application/json

{
  "slides": [
  ],
  "theme_type": "color",
  "theme_name": "professional_gray"
}


###
# 3. Get an Extracted Image
#
# This request retrieves a specific image that was extracted from the PDF.
# The backend serves these images from a static directory.
#
# IMPORTANT: Replace `image_1_1_some_uuid.jpeg` with a real filename from the response of the "Generate Slide Content" request.
GET {{api}}/images/image_1_1_9d7b04b8-a505-4bf2-b0b0-8c5c2142aa60.png