# main.py
# Import necessary libraries
import os
import fitz  # PyMuPDF
from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.responses import StreamingResponse
from fastapi.middleware.cors import CORSMiddleware
import google.generativeai as genai
from pptx import Presentation
import json
import io
from dotenv import load_dotenv # Import the dotenv library

# --- Configuration ---
# Load environment variables from the .env file
load_dotenv()

# Create a FastAPI app instance
app = FastAPI(title="PDF to Presentation API")

# Configure CORS (Cross-Origin Resource Sharing)
# This allows your React frontend to communicate with this backend.
# IMPORTANT: For production, you should restrict the origins to your frontend's domain.
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Allows all origins for now
    allow_credentials=True,
    allow_methods=["*"],  # Allows all methods
    allow_headers=["*"],  # Allows all headers
)

# Configure the Google Gemini API key
try:
    genai.configure(api_key=os.environ["GOOGLE_API_KEY"])
except KeyError:
    # This provides a helpful error message if the key is not set.
    print("ERROR: GOOGLE_API_KEY environment variable not set.")
    # In a real app, you might want to exit or disable AI features.


# --- Helper Functions (We will build these out later) ---

def extract_text_from_pdf(pdf_content: bytes) -> str:
    """Extracts text content from a PDF file's bytes."""
    full_text = ""
    # Open the PDF from the in-memory bytes
    with fitz.open(stream=pdf_content, filetype="pdf") as doc:
        # Iterate through each page of the PDF
        for page in doc:
            # Extract text from the page
            full_text += page.get_text()

    print(f"Successfully extracted {len(full_text)} characters from the PDF.")
    return full_text


def generate_slides_content_with_gemini(text: str) -> list:
    """Uses Gemini to generate presentation content from text."""
    print("Generating slide content with Gemini...")

    # Initialize the Generative Model
    # Using gemini-2.0-flash as it is fast and capable for this task
    model = genai.GenerativeModel('gemini-2.0-flash')

    # This is the prompt that instructs the AI. It's carefully designed
    # to request a specific JSON output format.
    prompt = f"""
    Based on the following text from a report, please generate a summary presentation.
    The output should be a valid JSON object.

    The JSON object must be a single list `[]` containing multiple slide objects `{{}}`.

    Each slide object must have two keys:
    1. "title": A string for the slide's title (maximum 10 words).
    2. "bullets": A list of strings, where each string is a key takeaway or bullet point (maximum 3 bullet points per slide).

    Summarize the key points and structure them logically for a presentation.

    Here is the text:
    ---
    {text}
    ---
    """

    try:
        # Generate content using the model
        response = model.generate_content(prompt)

        # Clean up the response to ensure it's valid JSON.
        # The model sometimes wraps the JSON in ```json ... ```
        response_text = response.text.strip().replace("```json", "").replace("```", "")

        # Parse the JSON string into a Python list
        slide_data = json.loads(response_text)

        # Basic validation of the returned structure
        if not isinstance(slide_data, list):
            raise ValueError("AI response is not a list.")
        if any("title" not in s or "bullets" not in s for s in slide_data):
            raise ValueError("AI response is missing required keys ('title', 'bullets').")

        print("Successfully generated and parsed slide data from Gemini.")
        return slide_data

    except (json.JSONDecodeError, ValueError) as e:
        print(f"Error parsing AI response: {e}")
        print(f"Raw AI response was:\n{response.text}")
        raise HTTPException(status_code=500, detail="Failed to parse valid slide structure from AI response.")
    except Exception as e:
        print(f"An unexpected error occurred with the Gemini API: {e}")
        raise HTTPException(status_code=500, detail="An error occurred while generating content with the AI.")


def create_presentation(slide_data: list) -> io.BytesIO:
    """Creates a PowerPoint presentation from structured data."""
    print("Creating PowerPoint file...")
    prs = Presentation()
    # Use a wider slide format (16:9)
    prs.slide_width = 9144000
    prs.slide_height = 5143500

    # Title Slide Layout
    title_slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(title_slide_layout)
    title = slide.shapes.title
    subtitle = slide.placeholders[1]
    title.text = slide_data[0].get("title", "Presentation") if slide_data else "Presentation"
    subtitle.text = "Generated by AI"

    # Content Slides
    for slide_info in slide_data:
        slide_layout = prs.slide_layouts[1]  # Title and Content layout
        slide = prs.slides.add_slide(slide_layout)
        title = slide.shapes.title
        body = slide.placeholders[1]
        title.text = slide_info.get("title", "No Title")

        tf = body.text_frame
        tf.clear()  # Clear existing text
        for bullet in slide_info.get("bullets", []):
            p = tf.add_paragraph()
            p.text = bullet
            p.level = 0

    # Save the presentation to an in-memory byte stream
    pptx_stream = io.BytesIO()
    prs.save(pptx_stream)
    pptx_stream.seek(0)  # Rewind the stream to the beginning
    return pptx_stream


# --- API Endpoint ---

@app.post("/api/generate-presentation")
@app.post("/api/generate-presentation")
async def generate_presentation_endpoint(file: UploadFile = File(...)):
    """
    This endpoint receives a PDF file, processes it, and returns a
    PowerPoint presentation.
    """
    print(f"Received file: {file.filename} ({file.content_type})")

    if file.content_type != "application/pdf":
        raise HTTPException(status_code=400, detail="Invalid file type. Please upload a PDF.")

    try:
        pdf_contents = await file.read()

        # --- Core Logic Pipeline ---
        # 1. Extract text from PDF
        text_content = extract_text_from_pdf(pdf_contents)

        # 2. Generate slide content with Gemini
        slides = generate_slides_content_with_gemini(text_content)

        # 3. Create the .pptx file in memory
        pptx_file_stream = create_presentation(slides)

        # 4. Return the file as a streaming response
        print("Sending .pptx file to client.")
        return StreamingResponse(
            pptx_file_stream,
            media_type="application/vnd.openxmlformats-officedocument.presentationml.presentation",
            headers={"Content-Disposition": f"attachment; filename=presentation.pptx"}
        )

    except Exception as e:
        if isinstance(e, HTTPException):
            raise e
        print(f"An unexpected error occurred in the endpoint: {e}")
        raise HTTPException(status_code=500, detail=f"An unexpected server error occurred: {str(e)}")

@app.get("/")
def read_root():
    """A simple root endpoint to confirm the server is running."""
    return {"message": "Welcome to the Presentation Generator API!"}

